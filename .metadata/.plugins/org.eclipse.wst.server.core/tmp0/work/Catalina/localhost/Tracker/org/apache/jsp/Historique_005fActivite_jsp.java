/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.81
 * Generated at: 2022-07-01 11:24:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Historique_005fActivite_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "Les JSPs ne permettent que GET, POST ou HEAD. Jasper permet aussi OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>Accueil</title>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\r\n");
      out.write("<link rel=\"stylesheet\" media=\"screen\" type=\"text/css\" title=\"mon style\"\r\n");
      out.write("	href=\"MenuHorizontal2.css\">\r\n");
      out.write("<style>\r\n");
      out.write("body {\r\n");
      out.write("	margin-left: 0;\r\n");
      out.write("	margin-right: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#page {\r\n");
      out.write("	min-height: 100%;\r\n");
      out.write("	width: 750px;\r\n");
      out.write("	margin-left: auto;\r\n");
      out.write("	margin-right: auto;\r\n");
      out.write("	padding: 1.5em;\r\n");
      out.write("	font-family: Calibri, Times New Roman, Arial, Verdana, Times, sans-serif;\r\n");
      out.write("	font-size: 1.1em;\r\n");
      out.write("	border-style: ridge;\r\n");
      out.write("	border-width: 5px;\r\n");
      out.write("	border-color: #FAAC58;\r\n");
      out.write("	background-color: rgb(200, 120, 25);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#footer {\r\n");
      out.write("	color: #FAAC58;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	font-family: Calibri, Times New Roman, Bookman Old Style, sans-serif;\r\n");
      out.write("	padding-top: 2px;\r\n");
      out.write("	padding-bottom: 2px;\r\n");
      out.write("	height: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#blocmenu {\r\n");
      out.write("	/* height: 36px; */\r\n");
      out.write("	font-size: 1.0em;\r\n");
      out.write("	font-family: Calibri, Times New Roman, Bookman Old Style, sans-serif;\r\n");
      out.write("	background-color: #585858;\r\n");
      out.write("	padding-left: 120px;\r\n");
      out.write("	display: flex;\r\n");
      out.write("	flex-wrap: wrap;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#menu {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	flex-wrap: wrap;\r\n");
      out.write("	justify-content: space-between;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#menu li {\r\n");
      out.write("	float: left;\r\n");
      out.write("	list-style-type: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#menu li a, #menu li a:visited {\r\n");
      out.write("	padding: 10px;\r\n");
      out.write("	line-height: 35px;\r\n");
      out.write("	font-size: 18px;\r\n");
      out.write("	text-decoration: none;\r\n");
      out.write("	color: #FAAC58;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#menu li a:hover {\r\n");
      out.write("	background-color: #FAAC58;\r\n");
      out.write("	color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#corps {\r\n");
      out.write("	padding: 1.0em;\r\n");
      out.write("	margin-top: 10px;\r\n");
      out.write("	padding-top: 2px;\r\n");
      out.write("	overflow: hidden;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#corps h2 {\r\n");
      out.write("	padding: 1.1em;\r\n");
      out.write("	margin-top: 10px;\r\n");
      out.write("	padding-top: 2px;\r\n");
      out.write("	overflow: hidden;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	font-size: 18px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("ul {\r\n");
      out.write("	list-style-type: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("li {\r\n");
      out.write("	list-style-type: none;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("	<!-- Source: https://wiki.openstreetmap.org/wiki/Openlayers_Track_example -->\r\n");
      out.write("	<title>Simple OSM GPX Track</title>\r\n");
      out.write("	<!-- bring in the OpenLayers javascript library\r\n");
      out.write("		 (here we bring it from the remote site, but you could\r\n");
      out.write("		 easily serve up this javascript yourself) -->\r\n");
      out.write("	<script src=\"http://www.openlayers.org/api/OpenLayers.js\"></script>\r\n");
      out.write("	<!-- bring in the OpenStreetMap OpenLayers layers.\r\n");
      out.write("		 Using this hosted file will make sure we are kept up\r\n");
      out.write("		 to date with any necessary changes -->\r\n");
      out.write("	<script src=\"https://www.openstreetmap.org/openlayers/OpenStreetMap.js\"></script>\r\n");
      out.write("\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("		var map; //complex object of type OpenLayers.Map\r\n");
      out.write("\r\n");
      out.write("		function init() {\r\n");
      out.write("			map = new OpenLayers.Map (\"map\", {\r\n");
      out.write("				controls:[\r\n");
      out.write("					new OpenLayers.Control.Navigation(),\r\n");
      out.write("					new OpenLayers.Control.PanZoomBar(),\r\n");
      out.write("					new OpenLayers.Control.LayerSwitcher(),\r\n");
      out.write("					new OpenLayers.Control.Attribution()],\r\n");
      out.write("				maxExtent: new OpenLayers.Bounds(-20037508.34,-20037508.34,20037508.34,20037508.34),\r\n");
      out.write("				maxResolution: 156543.0399,\r\n");
      out.write("				numZoomLevels: 19,\r\n");
      out.write("				units: 'm',\r\n");
      out.write("				projection: new OpenLayers.Projection(\"EPSG:900913\"),\r\n");
      out.write("				displayProjection: new OpenLayers.Projection(\"EPSG:4326\")\r\n");
      out.write("			} );\r\n");
      out.write("\r\n");
      out.write("			// Define the map layer\r\n");
      out.write("			// Here we use a predefined layer that will be kept up to date with URL changes\r\n");
      out.write("			layerMapnik = new OpenLayers.Layer.OSM.Mapnik(\"Mapnik\");\r\n");
      out.write("			map.addLayer(layerMapnik);\r\n");
      out.write("			layerCycleMap = new OpenLayers.Layer.OSM.CycleMap(\"CycleMap\");\r\n");
      out.write("			map.addLayer(layerCycleMap);\r\n");
      out.write("			layerMarkers = new OpenLayers.Layer.Markers(\"Markers\");\r\n");
      out.write("			map.addLayer(layerMarkers);\r\n");
      out.write("\r\n");
      out.write("			// Add the Layer with the GPX Track\r\n");
      out.write("			var lgpx = new OpenLayers.Layer.Vector(\"Lakeside cycle ride\", {\r\n");
      out.write("				strategies: [new OpenLayers.Strategy.Fixed()],\r\n");
      out.write("				protocol: new OpenLayers.Protocol.HTTP({\r\n");
      out.write("					url: \"220604V.gpx\",\r\n");
      out.write("					format: new OpenLayers.Format.GPX()\r\n");
      out.write("				}),\r\n");
      out.write("				style: {strokeColor: \"green\", strokeWidth: 5, strokeOpacity: 0.5},\r\n");
      out.write("				projection: new OpenLayers.Projection(\"EPSG:4326\")\r\n");
      out.write("			});\r\n");
      out.write("			map.addLayer(lgpx);\r\n");
      out.write("			/* const vectorLayer = new VectorLayer({\r\n");
      out.write("			  background: '#1a2b39',\r\n");
      out.write("			  source: new VectorSource({\r\n");
      out.write("			    url: '220604V.gpx',\r\n");
      out.write("			    format: new OpenLayers.Format.GPX(),\r\n");
      out.write("			  }),\r\n");
      out.write("			  style: function (feature) {\r\n");
      out.write("			    const color = feature.get('COLOR') || '#eeeeee';\r\n");
      out.write("			    style.getFill().setColor(color);\r\n");
      out.write("			    return style;\r\n");
      out.write("			  },\r\n");
      out.write("			});\r\n");
      out.write("		map.addLayer(vectorLayer); */\r\n");
      out.write("\r\n");
      out.write("			// Add a Layer with Marker\r\n");
      out.write("			var size = new OpenLayers.Size(21, 25);\r\n");
      out.write("			var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);\r\n");
      out.write("			var icon = new OpenLayers.Icon('https://www.openstreetmap.org/openlayers/img/marker.png',size,offset);\r\n");
      out.write("			layerMarkers.addMarker(new OpenLayers.Marker(lonLat,icon));\r\n");
      out.write("\r\n");
      out.write("			// Start position for the map (hardcoded here for simplicity,\r\n");
      out.write("			// but maybe you want to get this from the URL params)\r\n");
      out.write("			var lat=47.496792;\r\n");
      out.write("			var lon=7.571726;\r\n");
      out.write("			var zoom=13;\r\n");
      out.write("			var lonLat = new OpenLayers.LonLat(lon, lat).transform(new OpenLayers.Projection(\"EPSG:4326\"), map.getProjectionObject());\r\n");
      out.write("			map.setCenter(lonLat, zoom);\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<!-- body.onload is called once the page is loaded (call the 'init' function) -->\r\n");
      out.write("<body onload=\"init();\">\r\n");
      out.write("	<!-- define a DIV into which the map will appear. Make it take up the whole window -->\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("	<div id=\"page\">\r\n");
      out.write("		<div id=\"banniere_image\">\r\n");
      out.write("			<h1>Accueil Tracker</h1>\r\n");
      out.write("		</div>\r\n");
      out.write("\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "header.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("		<div id=\"corps\">\r\n");
      out.write("			<h3>Historique</h3>\r\n");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("			<div id=\"map\" style=\"height: 500px;width:700px;\"></div>\r\n");
      out.write("			\r\n");
      out.write("			<input type=\"submit\" onclick=\"AddMarker(49.251329, 4.039696)\" name=\"button\" title=\"Ajouter un point GPS\" value=\"Ajouter un point GPS d&eacute;placable\" />\r\n");
      out.write("		</div>\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "footer.html", out, false);
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
