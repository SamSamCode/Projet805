/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.81
 * Generated at: 2022-07-01 06:59:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class CreerUnSport_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "Les JSPs ne permettent que GET, POST ou HEAD. Jasper permet aussi OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>CreationSport</title>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\r\n");
      out.write("<link rel=\"stylesheet\" media=\"screen\" type=\"text/css\" title=\"mon style\"\r\n");
      out.write("	href=\"MenuHorizontal2.css\">\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"");
      out.print(request.getContextPath());
      out.write("/resources/css/main.css\" />\r\n");
      out.write("<style>\r\n");
      out.write("body {\r\n");
      out.write("	margin-left: 0;\r\n");
      out.write("	margin-right: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#page {\r\n");
      out.write("	min-height: 100%;\r\n");
      out.write("	width: 750px;\r\n");
      out.write("	margin-left: auto;\r\n");
      out.write("	margin-right: auto;\r\n");
      out.write("	padding: 1.5em;\r\n");
      out.write("	font-family: Calibri, Times New Roman, Arial, Verdana, Times, sans-serif;\r\n");
      out.write("	font-size: 1.1em;\r\n");
      out.write("	border-style: ridge;\r\n");
      out.write("	border-width: 5px;\r\n");
      out.write("	border-color: #FAAC58;\r\n");
      out.write("	background-color: rgb(200, 120, 25);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#footer {\r\n");
      out.write("	color: #FAAC58;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	font-family: Calibri, Times New Roman, Bookman Old Style, sans-serif;\r\n");
      out.write("	padding-top: 2px;\r\n");
      out.write("	padding-bottom: 2px;\r\n");
      out.write("	height: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#blocmenu {\r\n");
      out.write("	/* height: 36px; */\r\n");
      out.write("	font-size: 1.0em;\r\n");
      out.write("	font-family: Calibri, Times New Roman, Bookman Old Style, sans-serif;\r\n");
      out.write("	background-color: #585858;\r\n");
      out.write("	padding-left: 120px;\r\n");
      out.write("	display: flex;\r\n");
      out.write("	flex-wrap: wrap;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#menu {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	flex-wrap: wrap;\r\n");
      out.write("	justify-content: space-between;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#menu li {\r\n");
      out.write("	float: left;\r\n");
      out.write("	list-style-type: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#menu li a, #menu li a:visited {\r\n");
      out.write("	padding: 10px;\r\n");
      out.write("	line-height: 35px;\r\n");
      out.write("	font-size: 18px;\r\n");
      out.write("	text-decoration: none;\r\n");
      out.write("	color: #FAAC58;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#menu li a:hover {\r\n");
      out.write("	background-color: #FAAC58;\r\n");
      out.write("	color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#corps {\r\n");
      out.write("	padding: 1.0em;\r\n");
      out.write("	margin-top: 10px;\r\n");
      out.write("	padding-top: 2px;\r\n");
      out.write("	overflow: hidden;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#corps h2 {\r\n");
      out.write("	padding: 1.1em;\r\n");
      out.write("	margin-top: 10px;\r\n");
      out.write("	padding-top: 2px;\r\n");
      out.write("	overflow: hidden;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	font-size: 18px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("ul {\r\n");
      out.write("	list-style-type: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("li {\r\n");
      out.write("	list-style-type: none;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<link rel=\"stylesheet\" href=\"leaflet/leaflet.css\">\r\n");
      out.write("	<script src=\"leaflet/leaflet.js\"></script>\r\n");
      out.write("	<link rel=\"stylesheet\" href=\"src/Leaflet.GraphicScale.min.css\">\r\n");
      out.write("	<link rel=\"stylesheet\" href=\"src/stylesheet.css\">\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div id=\"page\">\r\n");
      out.write("		<div id=\"banniere_image\">\r\n");
      out.write("			<h1>Creation Tracker</h1>\r\n");
      out.write("		</div>\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "header.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("		<form action=\"CreerSport\" method=\"post\">\r\n");
      out.write("			<div id=\"corps\">\r\n");
      out.write("				<h3>Espace de creation</h3>\r\n");
      out.write("				<label for=\"nomSport\"><strong>Nom du sport</strong></label> <input\r\n");
      out.write("					type=\"text\" placeholder=\"Nom du sport\" name=\"nomSport\" required>\r\n");
      out.write("				<br /> <br />\r\n");
      out.write("				<button type=\"submit\">Ajout</button>\r\n");
      out.write("			</div>\r\n");
      out.write("		</form>\r\n");
      out.write("		\r\n");
      out.write("		<div id=\"map\"></div>\r\n");
      out.write("\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "footer.html", out, false);
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<script src=\"src/Leaflet.GraphicScale.min.js\"></script>\r\n");
      out.write("	<script src=\"https://api.mapbox.com/mapbox.js/plugins/leaflet-omnivore/v0.2.0/leaflet-omnivore.min.js\"></script>\r\n");
      out.write("	<script>\r\n");
      out.write("		function getUrlParameter(name) {\r\n");
      out.write("			name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\r\n");
      out.write("			var regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\r\n");
      out.write("			var results = regex.exec(location.search);\r\n");
      out.write("			return (results === null) ? '' : decodeURIComponent(results[1]\r\n");
      out.write("					.replace(/\\+/g, ' '));\r\n");
      out.write("		};\r\n");
      out.write("\r\n");
      out.write("		function highlightFeature(e) {\r\n");
      out.write("			var layer = e.target;\r\n");
      out.write("\r\n");
      out.write("			layer.setStyle({\r\n");
      out.write("				weight : 5,\r\n");
      out.write("				color : '#666',\r\n");
      out.write("				dashArray : '10 10',\r\n");
      out.write("				fillOpacity : 0.7\r\n");
      out.write("			});\r\n");
      out.write("\r\n");
      out.write("			if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {\r\n");
      out.write("				layer.bringToFront();\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		function resetHighlight(e) {\r\n");
      out.write("			customLayer.resetStyle(e.target);\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		var Marker = L.icon({\r\n");
      out.write("			iconUrl : 'Point.png',\r\n");
      out.write("\r\n");
      out.write("			iconSize : [ 27, 32 ], // size of the icon\r\n");
      out.write("			iconAnchor : [ 13, 32 ], // point of the icon which will correspond to marker's location\r\n");
      out.write("			popupAnchor : [ 0, -30 ]\r\n");
      out.write("		// point from which the popup should open relative to the iconAnchor\r\n");
      out.write("		});\r\n");
      out.write("		var Lon = getUrlParameter('Lon')\r\n");
      out.write("		var Lat = getUrlParameter('Lat')\r\n");
      out.write("		var starts = new L.LayerGroup();\r\n");
      out.write("		L.marker([ Lat, Lon ], {\r\n");
      out.write("			icon : Marker\r\n");
      out.write("		}).bindPopup(Lat + '<br>' + Lon).addTo(starts);\r\n");
      out.write("\r\n");
      out.write("		// ****************** change colors sequentially  *****************\r\n");
      out.write("\r\n");
      out.write("		var colors = [ '#3388ff', '#800000', '#9a6324', '#808000', '#469990',\r\n");
      out.write("				'#000075', '#000000', '#e6194b', '#f58231', '#ffe119',\r\n");
      out.write("				'#bfef45', '#3cb44b', '#42d4f4', '#4363d8', '#911eb4',\r\n");
      out.write("				'#f032e6', '#a9a9a9',\r\n");
      out.write("				//'#fabed4',	Pink\r\n");
      out.write("				//'#ffd8b1',	Apricot\r\n");
      out.write("				//'#fffac8',	Beige\r\n");
      out.write("				//'#aaffc3',	Mint\r\n");
      out.write("				'#dcbeff',\r\n");
      out.write("		//'#ffffff'	White\r\n");
      out.write("		];\r\n");
      out.write("\r\n");
      out.write("		var n = 0;\r\n");
      out.write("		var customLayer = L.geoJson(null, {\r\n");
      out.write("			style : function(feature) {\r\n");
      out.write("				if (!feature.properties.id) {\r\n");
      out.write("					feature.properties.id = n++;\r\n");
      out.write("				}\r\n");
      out.write("				var iColor = feature.properties.id % colors.length;\r\n");
      out.write("				return {\r\n");
      out.write("					color : colors[iColor]\r\n");
      out.write("				};\r\n");
      out.write("			},\r\n");
      out.write("			onEachFeature : function(feature, layer) {\r\n");
      out.write("				if (feature.properties.desc) {\r\n");
      out.write("					layer.bindPopup(feature.properties.desc);\r\n");
      out.write("				}\r\n");
      out.write("				layer.on({\r\n");
      out.write("					mouseover : highlightFeature,\r\n");
      out.write("					mouseout : resetHighlight\r\n");
      out.write("				});\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		var map = new L.LayerGroup();\r\n");
      out.write("		var runLayer = omnivore.gpx(\"../\" + getUrlParameter('map'), null,\r\n");
      out.write("				customLayer).on('ready', function() {\r\n");
      out.write("			map.fitBounds(runLayer.getBounds());\r\n");
      out.write("		}).addTo(map);\r\n");
      out.write("\r\n");
      out.write("		var Time = \"\";\r\n");
      out.write("		var Lat = \"\";\r\n");
      out.write("		var Lon = \"\";\r\n");
      out.write("		var i = 0;\r\n");
      out.write("		while ((Dist = getUrlParameter(\"D\" + i)) != \"\") {\r\n");
      out.write("			Time = getUrlParameter(\"T\" + i);\r\n");
      out.write("			Time = Math.floor(Time / 60) + \"h\"\r\n");
      out.write("					+ (Time % 60).toString().padStart(2, \"0\");\r\n");
      out.write("			Lon = getUrlParameter(\"Lon\" + i);\r\n");
      out.write("			Lat = getUrlParameter(\"Lat\" + i)\r\n");
      out.write("			var marker = new L.marker([ Lat, Lon ], {\r\n");
      out.write("				opacity : 0\r\n");
      out.write("			});\r\n");
      out.write("			marker.bindTooltip(Dist + \"km<br>\" + Time, {\r\n");
      out.write("				permanent : true,\r\n");
      out.write("				offset : [ -15, 25 ]\r\n");
      out.write("			});\r\n");
      out.write("			marker.addTo(map);\r\n");
      out.write("			i++;\r\n");
      out.write("			Dist = getUrlParameter(\"D\" + i);\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		var osmLink = '<a href=\"https://openstreetmap.org\">OpenStreetMap</a>';\r\n");
      out.write("		var osmUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', osmAttrib = '&copy; '\r\n");
      out.write("				+ osmLink + ' Contributors';\r\n");
      out.write("		var mbAttr = 'Map data &copy; <a href=\"https://openstreetmap.org\">OpenStreetMap</a> contributors, '\r\n");
      out.write("				+ '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, '\r\n");
      out.write("				+ 'Imagery Â© <a href=\"https://mapbox.com\">Mapbox</a>', mbUrl = 'https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiamFudXMwMDciLCJhIjoiY2l0azNvNjZlMDAzbTQ2bGk0dDFtaGhzcCJ9.8GAQYGpMFog62mRv17pGtA';\r\n");
      out.write("\r\n");
      out.write("		var osmMap = L.tileLayer(osmUrl, {\r\n");
      out.write("			attribution : osmAttrib\r\n");
      out.write("		}), satellite = L.tileLayer(mbUrl, {\r\n");
      out.write("			id : 'mapbox.satellite',\r\n");
      out.write("			attribution : mbAttr\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		var Stamen_Terrain = L\r\n");
      out.write("				.tileLayer(\r\n");
      out.write("						'https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.{ext}',\r\n");
      out.write("						{\r\n");
      out.write("							attribution : 'Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\r\n");
      out.write("							subdomains : 'abcd',\r\n");
      out.write("							ext : 'png'\r\n");
      out.write("						});\r\n");
      out.write("		var standard = L\r\n");
      out.write("				.tileLayer(\r\n");
      out.write("						'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',\r\n");
      out.write("						{\r\n");
      out.write("							attribution : 'Map data: &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | Map style: &copy; <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)',\r\n");
      out.write("							maxZoom : 18\r\n");
      out.write("						});\r\n");
      out.write("\r\n");
      out.write("		var map = L.map('map', {\r\n");
      out.write("			layers : [ osmMap, starts, map ],\r\n");
      out.write("		}).setView([ 49.21, 4.2 ], 8);\r\n");
      out.write("\r\n");
      out.write("		var baseLayers = {\r\n");
      out.write("			\"OpenStreetMap\" : osmMap,\r\n");
      out.write("			\"OpenTopoMap\" : standard,\r\n");
      out.write("			\"3D map\" : Stamen_Terrain,\r\n");
      out.write("			\"satellite\" : satellite,\r\n");
      out.write("		};\r\n");
      out.write("\r\n");
      out.write("		L.control.layers(baseLayers).addTo(map);\r\n");
      out.write("\r\n");
      out.write("		var graphicScale = L.control.graphicScale({\r\n");
      out.write("			position : 'bottomright',\r\n");
      out.write("			fill : 'hollow',\r\n");
      out.write("		}).addTo(map);\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("/* 	var map = L.map('map').setView([51.505, -0.09], 13);\r\n");
      out.write("\r\n");
      out.write("	L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n");
      out.write("	    attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n");
      out.write("	}).addTo(map);\r\n");
      out.write("\r\n");
      out.write("	L.marker([51.5, -0.09]).addTo(map)\r\n");
      out.write("	    .bindPopup('A pretty CSS3 popup.<br> Easily customizable.')\r\n");
      out.write("	    .openPopup(); */\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
