import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import java.io.BufferedReader;
import java.io.File;

/**
 * Servlet implementation class Inscription
 */

@WebServlet(urlPatterns = {"/Inscription"})
public class Inscription extends HttpServlet {
	private static final long serialVersionUID = 1L;

	private InputStream getFileFromResourceAsStream(String fileName) {

		// The class loader that loaded the class
		ClassLoader classLoader = getClass().getClassLoader();
		InputStream inputStream = classLoader.getResourceAsStream(fileName);

		// the stream holding the file content
		if (inputStream == null) {
			throw new IllegalArgumentException("file not found! " + fileName);
		} else {
			return inputStream;
		}

	}

	// print input stream
	private static void printInputStream(InputStream is) {

		try (InputStreamReader streamReader =
				new InputStreamReader(is, StandardCharsets.UTF_8);
				BufferedReader reader = new BufferedReader(streamReader)) {

			String line;
			while ((line = reader.readLine()) != null) {
				System.out.println(line);
			}

		} catch (IOException e) {
			e.printStackTrace();
		}

	}


	/*
    The resource URL is not working in the JAR
    If we try to access a file that is inside a JAR,
    It throws NoSuchFileException (linux), InvalidPathException (Windows)

    Resource URL Sample: file:java-io.jar!/json/file1.json
	 */
	private File getFileFromResource(String fileName) throws URISyntaxException{

		ClassLoader classLoader = getClass().getClassLoader();
		URL resource = classLoader.getResource(fileName);
		System.out.println("res: " + resource);
		if (resource == null) {
			throw new IllegalArgumentException("file not found! " + fileName);
		} else {

			// failed if files have whitespaces or special characters
			//return new File(resource.getFile());

			return new File(resource.toURI());
		}

	}
	// print a file
	private static void printFile(File file) {

		List<String> lines;
		try {
			lines = Files.readAllLines(file.toPath(), StandardCharsets.UTF_8);
			lines.forEach(System.out::println);
		} catch (IOException e) {
			e.printStackTrace();
		}

	}


	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		response.setContentType("text/html");

		String reqName = request.getParameter("uname");
		String reqPassword = request.getParameter("psw");

//		String xmlFileName = "utilisateur.xml";
		String xmlFileName = "C:/Users/berti/Documents/Master/RT0805_Prog_repartie/Repo/Tracker/utilisateur.xml";
		
        File xmlFile = new File(xmlFileName);

		if(!xmlFile.exists()) {
			try {
				DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
				DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
				Document doc = dBuilder.newDocument();

				// root element
				Element rootElement = doc.createElement("users");
				doc.appendChild(rootElement);

				// User element
				Element user = doc.createElement("user");
				rootElement.appendChild(user);

				// User element
				Element name = doc.createElement("name");
				user.appendChild(doc.createTextNode(reqName));
				user.appendChild(name);

				// User element
				Element password = doc.createElement("password");
				user.appendChild(doc.createTextNode(reqPassword));
				user.appendChild(password);

				// write the content into xml file
				TransformerFactory transformerFactory = TransformerFactory.newInstance();
				Transformer transformer = transformerFactory.newTransformer();
				DOMSource source = new DOMSource(doc);
				StreamResult result = new StreamResult(new File(xmlFileName));
				transformer.transform(source, result);

				// Output to console for testing

				StreamResult consoleResult = new StreamResult(System.out);
				transformer.transform(source, consoleResult);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		else {
			try {
				DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
				DocumentBuilder db = dbf.newDocumentBuilder();
				Document doc = db.parse(xmlFile);
				// Récupérer l'élément racine
				Element rootElement = (Element) doc.getFirstChild();	

				// User element
				Element user = doc.createElement("user");
				rootElement.appendChild(user);

				// User element
				Element name = doc.createElement("name");
				user.appendChild(doc.createTextNode(reqName));
				user.appendChild(name);

				// User element
				Element password = doc.createElement("password");
				user.appendChild(doc.createTextNode(reqPassword));
				user.appendChild(password);

				// écrire le contenu dans un fichier xml
				TransformerFactory tf = TransformerFactory.newInstance();
				Transformer transformer = tf.newTransformer();
				DOMSource src = new DOMSource(doc);
				StreamResult res = new StreamResult(new File(xmlFileName));
				transformer.transform(src, res);
				
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
}